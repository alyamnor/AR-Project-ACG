//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/Scripts/Example/InputSystem/TouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @TouchControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControls"",
    ""maps"": [
        {
            ""name"": ""control"",
            ""id"": ""b0bba4cd-3de9-447e-a4b6-f8e51d38a3e0"",
            ""actions"": [
                {
                    ""name"": ""touch"",
                    ""type"": ""Value"",
                    ""id"": ""99d5d18b-46fb-457b-9755-a1d7d5a1df5c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""primaryTouch"",
                    ""type"": ""Value"",
                    ""id"": ""54e611a1-5379-40a4-b069-f3d9e75a6eff"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""secondaryTouch"",
                    ""type"": ""Value"",
                    ""id"": ""efffc205-32eb-423f-b570-725db8dbc5d7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""touchCount"",
                    ""type"": ""Value"",
                    ""id"": ""744f4b44-8cba-47ef-87b9-9d8623337ca8"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2384bb4a-c732-489b-a7bd-5e430e8a802f"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de583a38-66a0-4c96-9732-0cc8e1df244d"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""primaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8f703a6-fb71-4372-9313-f33fe86bc62d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""primaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dec69ae7-db95-45af-ae0a-01b3ac2c60d1"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""secondaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ce62321-dc64-43f6-843f-38f421040f3e"",
                    ""path"": ""<TouchscreenGestureInputController>/fingerCount"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""touchCount"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // control
        m_control = asset.FindActionMap("control", throwIfNotFound: true);
        m_control_touch = m_control.FindAction("touch", throwIfNotFound: true);
        m_control_primaryTouch = m_control.FindAction("primaryTouch", throwIfNotFound: true);
        m_control_secondaryTouch = m_control.FindAction("secondaryTouch", throwIfNotFound: true);
        m_control_touchCount = m_control.FindAction("touchCount", throwIfNotFound: true);
    }

    ~@TouchControls()
    {
        Debug.Assert(!m_control.enabled, "This will cause a leak and performance issues, TouchControls.control.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // control
    private readonly InputActionMap m_control;
    private List<IControlActions> m_ControlActionsCallbackInterfaces = new List<IControlActions>();
    private readonly InputAction m_control_touch;
    private readonly InputAction m_control_primaryTouch;
    private readonly InputAction m_control_secondaryTouch;
    private readonly InputAction m_control_touchCount;
    public struct ControlActions
    {
        private @TouchControls m_Wrapper;
        public ControlActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @touch => m_Wrapper.m_control_touch;
        public InputAction @primaryTouch => m_Wrapper.m_control_primaryTouch;
        public InputAction @secondaryTouch => m_Wrapper.m_control_secondaryTouch;
        public InputAction @touchCount => m_Wrapper.m_control_touchCount;
        public InputActionMap Get() { return m_Wrapper.m_control; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlActions set) { return set.Get(); }
        public void AddCallbacks(IControlActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlActionsCallbackInterfaces.Add(instance);
            @touch.started += instance.OnTouch;
            @touch.performed += instance.OnTouch;
            @touch.canceled += instance.OnTouch;
            @primaryTouch.started += instance.OnPrimaryTouch;
            @primaryTouch.performed += instance.OnPrimaryTouch;
            @primaryTouch.canceled += instance.OnPrimaryTouch;
            @secondaryTouch.started += instance.OnSecondaryTouch;
            @secondaryTouch.performed += instance.OnSecondaryTouch;
            @secondaryTouch.canceled += instance.OnSecondaryTouch;
            @touchCount.started += instance.OnTouchCount;
            @touchCount.performed += instance.OnTouchCount;
            @touchCount.canceled += instance.OnTouchCount;
        }

        private void UnregisterCallbacks(IControlActions instance)
        {
            @touch.started -= instance.OnTouch;
            @touch.performed -= instance.OnTouch;
            @touch.canceled -= instance.OnTouch;
            @primaryTouch.started -= instance.OnPrimaryTouch;
            @primaryTouch.performed -= instance.OnPrimaryTouch;
            @primaryTouch.canceled -= instance.OnPrimaryTouch;
            @secondaryTouch.started -= instance.OnSecondaryTouch;
            @secondaryTouch.performed -= instance.OnSecondaryTouch;
            @secondaryTouch.canceled -= instance.OnSecondaryTouch;
            @touchCount.started -= instance.OnTouchCount;
            @touchCount.performed -= instance.OnTouchCount;
            @touchCount.canceled -= instance.OnTouchCount;
        }

        public void RemoveCallbacks(IControlActions instance)
        {
            if (m_Wrapper.m_ControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlActions @control => new ControlActions(this);
    public interface IControlActions
    {
        void OnTouch(InputAction.CallbackContext context);
        void OnPrimaryTouch(InputAction.CallbackContext context);
        void OnSecondaryTouch(InputAction.CallbackContext context);
        void OnTouchCount(InputAction.CallbackContext context);
    }
}
